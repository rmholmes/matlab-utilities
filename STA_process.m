function STA_process(hname)
%---------------------------------------------------------------------
%---------------------------------------------------------------------
%
% This function processes a raw ROMS output _sta file and creates an
% extras file that adds various useful/common variables, currently
% including: z_rho, z_w, z_wi (interior z_w), N2, dudz, dvdz. 
%
% INPUTS:
%
% hname = _sta.nc history file generated by ROMS.
%
%
%---------------------------------------------------------------------
%
% Dependencies; none. 
%
% Ryans ROMS Matlab and netcdf Utilities 21/4/14
%
%---------------------------------------------------------------------
%---------------------------------------------------------------------

status = ['This is STA_process running on the file ' hname]

%Processed file information -----------------------------------------
ncid = netcdf.open(hname,'NC_NOWRITE');
%Get dimensions:
srID = netcdf.inqDimID(ncid, 's_rho');
swID = netcdf.inqDimID(ncid, 's_w');
tID = netcdf.inqDimID(ncid, 'ocean_time');
stationID = netcdf.inqDimID(ncid, 'station');

%Lengths of file:
[tmp,zrLhis] = netcdf.inqDim(ncid,srID);
[tmp,zwLhis] = netcdf.inqDim(ncid,swID);
zwiLhis = zwLhis-2;
[tmp,station] = netcdf.inqDim(ncid,stationID);
[tmp,tLhis] = netcdf.inqDim(ncid,tID);
netcdf.close(ncid);

Outfilename = [hname(1:(end-3)) '_ext.nc'];
if (exist(Outfilename) == 0) 
%Create new extras file ----------------------------------------------
status = ['Creating new extras file...']
ncidOUT = netcdf.create(Outfilename,'NETCDF4');

srID_OUT = netcdf.defDim(ncidOUT,'s_rho',zrLhis);
swID_OUT = netcdf.defDim(ncidOUT,'s_w',zwLhis);
swiID_OUT = netcdf.defDim(ncidOUT,'s_wi',zwiLhis);
stationID_OUT = netcdf.defDim(ncidOUT,'station',station);
tID_OUT = netcdf.defDim(ncidOUT,'ocean_time',tLhis);

%define new variables -------------------------------------
%----------------------------------------------------------

%z_rho:
z_rhoID_OUT = netcdf.defVar(ncidOUT,'z_rho','double',[srID_OUT ...
                    stationID_OUT tID_OUT]);

%z_w:
z_wID_OUT = netcdf.defVar(ncidOUT,'z_w','double',[swID_OUT ...
                    stationID_OUT tID_OUT]);

%z_wi:
z_wiID_OUT = netcdf.defVar(ncidOUT,'z_wi','double',[swiID_OUT ...
                    stationID_OUT tID_OUT]);

%N2:
N2ID_OUT = netcdf.defVar(ncidOUT,'N2','double',[swiID_OUT ...
                    stationID_OUT tID_OUT]);

%dudz:
dudzID_OUT = netcdf.defVar(ncidOUT,'dudz','double',[swiID_OUT ...
                    stationID_OUT tID_OUT]);

%dvdz:
dvdzID_OUT = netcdf.defVar(ncidOUT,'dvdz','double',[swiID_OUT ...
                    stationID_OUT tID_OUT]);

%----------------------------------------------------------
%----------------------------------------------------------

%Write some descriptions/global attributes:
netcdf.putAtt(ncidOUT,netcdf.getConstant('NC_GLOBAL'), ...
              'Description',['This is a netcdf extras file created ' ...
                    'by STA_process.m']);
netcdf.putAtt(ncidOUT,netcdf.getConstant('NC_GLOBAL'), ...
              'Base file',hname);
netcdf.putAtt(ncidOUT,netcdf.getConstant('NC_GLOBAL'), ...
              'File_creation_data_time',clock);

%End define mode adding a 20000 byte buffer on the end of the header:
netcdf.endDef(ncidOUT,20000,4,0,4);
status = ['Finished creating new file']
end

%Put new variables-----------------------------------------
%----------------------------------------------------------

%%%%%Z_RHO:%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
status = ['Getting and putting z_rho...']
%Get z_rho and z_w:
z_rho = zeros(zrLhis,station,tLhis);
z_w = zeros(zwLhis,station,tLhis);

%get depth type information:
Vtransform = 1;%ncread(hname,'Vtransform');
Vstretching = 1;%ncread(hname,'Vstretching');
hc = ncread(hname,'hc');
sc_r = ncread(hname,'s_rho');
Cs_r = ncread(hname,'Cs_r');
sc_w = ncread(hname,'s_w');
Cs_w = ncread(hname,'Cs_w');
N = length(sc_r);
Np = N+1;
h = ncread(hname,'h');
h = h(1); %IMPORTANT: assuming all stations have same depth.
zeta = ncread(hname,'zeta');

if (Vtransform == 1),
    z0=(sc_r-Cs_r)*hc + Cs_r*h;
    z_rho=repmat(z0,[1 station tLhis]) + repmat(permute(zeta,[3 1 2]),[zrLhis 1 1]).* ...
        (repmat(z0,[1 station tLhis])/h+1);
    z_w(1,:,:) = -h;
    z0=(sc_w-Cs_w)*hc + Cs_w*h;
    z_w(2:end,:,:)=repmat(z0(2:end),[1 station tLhis]) + repmat(permute(zeta,[3 1 2]),[zrLhis 1 1]).* ...
        (repmat(z0(2:end),[1 station tLhis])/h+1);
elseif (Vtransform == 2),
    z0=(hc*sc_r+Cs_r*h)/(hc+h);
    z_rho=repmat(permute(zeta,[3 1 2]),[zrLhis 1 1])+...
        (repmat(permute(zeta,[3 1 2]),[zrLhis 1 ...
                        1])+h).*repmat(z0,[1 station tLhis]);
    z0=(hc*sc_w+Cs_w*h)/(hc+h);
    z_w=repmat(permute(zeta,[3 1 2]),[zrLhis 1 1])+...
        (repmat(permute(zeta,[3 1 2]),[zrLhis 1 ...
                        1])+h).*repmat(z0,[1 station tLhis]);
end

netcdf.putVar(ncid,z_rhoID_OUT,z_rho);
netcdf.putVar(ncid,z_wID_OUT,z_w);
netcdf.putVar(ncid,z_wiID_OUT,z_w(2:(end-1),:,:));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%N2,dudz,dvdz:%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
status = ['Getting and putting N2...']
b = -0.0096*(sw_dens0(ncread(hname,'salt'),ncread(hname,'temp'))- ...
             1000);
u = ncread(hname,'u');
v = ncread(hname,'v');

N2 = (b(2:end,:,:)-b(1:(end-1),:,:))./...
     (z_rho(2:end,:,:)-z_rho(1:(end-1),:,:));
netcdf.putVar(ncid,N2ID_OUT,N2);
dudz = (u(2:end,:,:)-u(1:(end-1),:,:))./...
     (z_rho(2:end,:,:)-z_rho(1:(end-1),:,:));
netcdf.putVar(ncid,dudzID_OUT,dudz);
dvdz = (v(2:end,:,:)-v(1:(end-1),:,:))./...
     (z_rho(2:end,:,:)-z_rho(1:(end-1),:,:));
netcdf.putVar(ncid,dvdzID_OUT,dvdz);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%----------------------------------------------------------
%----------------------------------------------------------
netcdf.close(ncidOUT);
status = 'Done!'

end

