function [Var,iVar,jVar] = pcolPlotNC(hname,dname,VarOp,slice,plotting)
%---------------------------------------------------------------------
%---------------------------------------------------------------------
%
% This function plots a specified slice of the specified variable
% (VarOp) on the rho grid from the ROMS generated files hname and
% dname.
%
% INPUTS:
%
% hname = _his.nc history file generated by ROMS.
%
% dname = _dia.nc diagnostics file generated by ROMS.
%
% VarOp = variable definition string cell.
% has form:
% VarOp = {'Var1'} - only 1 variable
% VarOp = {'Var1' 'Var2'} - defaults to addition. 
% VarOp = {'Var1' 'Var2' 'Operation'}
%
% slice = cell defining the slice to take, for this it is always in
% the form;
%
% {[x1 x2],[y1 y2],[d1 d2],t}; slice using range x1:x2, y1:y2,
% d1:d2. if any of [x1 x2] = 0 then take entire range, if
% [x1 x2] etc. = sing. then only at that location.
%
% {[x1 x2],[y1 y2],[t1 t2]}; 2D slice for a 3D variable (no depth).
%
% {[x1 x2],[y1 y2],rho,[t1 t2]}; 2D isopycnal slice; (rho positive
% real).
%
% if x1,y2 etc. are positive integers, then taken as grid indices.
%
% if x1,y1 is a real number then taken as lon/lat (nearest grid).
%
% if d1/d2 < 0 real then taken as depth (nearest grid).
%
% if t1/t2 is a real number then taken as year day relative to time
% index of file. (hoffmiler plot?)
%
% plotting = 0 -> don't plot anything
%
% plotting = 1 -> plot
%
% plotting = 2 -> plot without isopycnals in appropriate cases.
%
%
%---------------------------------------------------------------------
%
% Dependencies; none. 
%
% Ryans ROMS Matlab and netcdf Utilities 17/7/13
%
%---------------------------------------------------------------------
%---------------------------------------------------------------------

%--------------USER OPTIONS-------------------------------------------
%---------------------------------------------------------------------
%isopycnals to plot:
    isp = [20:0.3:40];

%Depth limits:
Dlim = [-350 0];
    
%---------------------------------------------------------------------
%---------------------------------------------------------------------
    
%--------------Get file information-----------------------------------
ncid = netcdf.open(hname,'NC_NOWRITE');
%extras file name:
ename = [hname(1:(end-3)) '_ext.nc'];
if (exist(ename) == 2)
    ncidE = netcdf.open(ename,'NC_NOWRITE');
end

%spherical or not:
spherical = ncread(hname,'spherical');
if (spherical)
    xname = 'lon_rho';
    yname = 'lat_rho';
    xlab = 'Longitude ($^\circ$E)';
    ylab = 'Latitude ($^\circ$E)';
else
    xname = 'x_rho';
    yname = 'y_rho';
    xlab  = 'x (m)';
    ylab  = 'y (m)';
end

%Lengths of file:
[tmp,xLhis] = netcdf.inqDim(ncid,netcdf.inqDimID(ncid, 'xi_rho'));
[tmp,yLhis] = netcdf.inqDim(ncid,netcdf.inqDimID(ncid, 'eta_rho'));
[tmp,zLhis] = netcdf.inqDim(ncid,netcdf.inqDimID(ncid, 's_rho'));
str = 'ocean_time';
try
[tmp,tLhis] = netcdf.inqDim(ncid,netcdf.inqDimID(ncid,str));
catch exception
    if (strcmp(exception.identifier,['MATLAB:imagesci:netcdf:' ...
                            'libraryFailure']))
        str = 'clm_time';
try
[tmp,tLhis] = netcdf.inqDim(ncid,netcdf.inqDimID(ncid,str));
catch exception
    if (strcmp(exception.identifier,['MATLAB:imagesci:netcdf:' ...
                            'libraryFailure']))
        str = 'temp_time';
[tmp,tLhis] = netcdf.inqDim(ncid,netcdf.inqDimID(ncid,str));
    end
end
    end
end
% $$$ [tmp,tLhis] = netcdf.inqDim(ncid,netcdf.inqDimID(ncid, 'ocean_time'));

%Full range variables:
if (slice{1} == 0)
    slice{1} = [1 xLhis];
end
if (slice{2} == 0)
    slice{2} = [1 yLhis];
end

if (length(slice) == 4)
    if (slice{3} == 0)
        slice{3} = [1 zLhis];
    end
    if (slice{4} == 0)
        slice{4} = [1 tLhis];
    end
else
    if (slice{3} == 0)
        slice{3} = [1 tLhis];
    end
end


%determine type and limits of plot:
%time indicies -------------------------------------------------------
if (length(slice{end})>1)
    tsliced = 0; % Hoffmoller plot (not implemented) or simple time series.
    if (round(slice{end}(1)) == slice{end}(1)) %integer time indicy
        time_ii = slice{end}(1);
        time_di = netcdf.getVar(ncid,netcdf.inqVarID(ncid, ...
                                                  str), ...
                                  [time_ii-1],[1],'double')/86400;
    else
        time = netcdf.getVar(ncid,netcdf.inqVarID(ncid, ...
                                                  str), ...
                                  [0],[tLhis],'double')/86400;
        [tmp time_ii] = min(abs(time-slice{end}(1)));
        time_di = time(time_ii);
    end
    if (round(slice{end}(2)) == slice{end}(2)) %integer time indicy
        time_if = slice{end}(2);
        time_df = netcdf.getVar(ncid,netcdf.inqVarID(ncid, ...
                                                  str), ...
                                  [time_if-1],[1],'double')/86400;
    else
        time = netcdf.getVar(ncid,netcdf.inqVarID(ncid, ...
                                                  str), ...
                                  [0],[tLhis],'double')/86400;
        [tmp time_if] = min(abs(time-slice{end}(2)));
        time_df = time(time_if);
    end
    time = netcdf.getVar(ncid,netcdf.inqVarID(ncid, str), ...
                              [time_ii-1],[time_if-time_ii+1],'double')/86400;
else
    if (round(slice{end}) == slice{end}) %integer time indicy
        time_ii = slice{end};
        time_di = netcdf.getVar(ncid,netcdf.inqVarID(ncid, ...
                                                  str), ...
                                  [time_ii-1],[1],'double')/86400;
    else
        time = netcdf.getVar(ncid,netcdf.inqVarID(ncid, ...
                                                  str), ...
                                  [0],[tLhis],'double')/86400;
        [tmp time_ii] = min(abs(time-slice{end}));
        time_di = time(time_ii);
    end
    time_if = time_ii;
    time_df = time_di;
    tsliced = 1;
end
%tsliced = 0 - range in time
%tsliced = 1 - constant time plot.
%depth indicies -------------------------------------------------------
dsliced = 0;
if (length(slice) == 4) %have depth.
    if (round(slice{3}(1)) == slice{3}(1)) %integer depth indicy
        depth_ii = slice{3}(1);
        if (exist(ename) == 2)
        depth_di = netcdf.getVar(ncidE,netcdf.inqVarID(ncidE,'z_rho'), ...
                                      [round(xLhis/2) round(yLhis/2) ...
                            depth_ii-1 round(tLhis/2)],[1 1 1 1], ...
                                      'double');
        else
            depth_di = depth_ii;
        end
    elseif (slice{3}(1)<0) %Depth in meters.
        if (exist(ename) == 2)
        zvec = netcdf.getVar(ncidE,netcdf.inqVarID(ncidE,'z_rho'), ...
                                   [round(xLhis/2) round(yLhis/2) 0 ...
                            round(tLhis/2)],[1 1 zLhis 1], 'double');
        [tmp depth_ii] = min(abs(zvec-slice{3}(1)));
        depth_di = zvec(depth_ii);
        else
            depth_ii = slice{3}(1);
            depth_di = depth_ii;
        end
    else (slice{3}(1) > 0) %isopycnal slice
        rhoISP = slice{3}(1);
        dsliced = 2; %isopycnal plot.
    end
    if (length(slice{3})>1) %range in depth
        dsliced = 0;
        if (round(slice{3}(2)) == slice{3}(2)) %integer depth indicy
            depth_if = slice{3}(2);
            if (exist(ename) == 2)
            depth_df = netcdf.getVar(ncidE,netcdf.inqVarID(ncidE,'z_rho'), ...
                                          [round(xLhis/2) round(yLhis/2) ...
                                depth_if-1 round(tLhis/2)],[1 1 1 ...
                                1], 'double');
            else
                depth_df = depth_if;
            end
        elseif (slice{3}(2)<0) %Depth in meters.
            if (exist(ename) == 2)
            zvec = netcdf.getVar(ncidE,netcdf.inqVarID(ncidE,'z_rho'), ...
                                      [round(xLhis/2) round(yLhis/2) 0 ...
                                round(tLhis/2)],[1 1 zLhis 1], 'double');
            [tmp depth_if] = min(abs(zvec-slice{3}(2)));
            depth_df = zvec(depth_ii);
            else
                depth_if = slice{3}(2);
                depth_df = depth_if;
            end
        end
    else
        if (dsliced ~= 2)
        dsliced = 1;
        depth_if = depth_ii;
        depth_df = depth_di;
        end
    end
else
    dsliced = 3; %no depth plot.
end
%dsliced = 0 - range in depth.
%dsliced = 1 - constant sigma level plot.
%dsliced = 2 - isopycnal plot.
%dsliced = 3 - plot of depth independent variable. 

%lat indicies -------------------------------------------------------
if (round(slice{2}(1)) == slice{2}(1)) %integer latitude indicy
    latitude_ii = slice{2}(1);
    latitude_di = netcdf.getVar(ncid,netcdf.inqVarID(ncid, ...
                                                     yname), ...
                                     [0 latitude_ii-1],[1 1],'double');
else
    lat = netcdf.getVar(ncid,netcdf.inqVarID(ncid, yname), ...
                             [0 0],[1 yLhis],'double');
    [tmp latitude_ii] = min(abs(lat-slice{2}(1)));
    latitude_di = lat(latitude_ii);
end

if (length(slice{2})>1)
    ltsliced = 0; % range in latitude.
    if (round(slice{2}(2)) == slice{2}(2)) %integer latitude indicy
        latitude_if = slice{2}(2);
        latitude_df = netcdf.getVar(ncid,netcdf.inqVarID(ncid, ...
                                                         yname), ...
                                         [0 latitude_if-1],[1 1],'double');
    else
        lat = netcdf.getVar(ncid,netcdf.inqVarID(ncid, yname), ...
                                 [0 0],[1 yLhis],'double');
        [tmp latitude_if] = min(abs(lat-slice{2}(2)));
        latitude_df = lat(latitude_if);
    end
else
    ltsliced = 1;
    latitude_if = latitude_ii;
    latitude_df = latitude_di;
end
%ltsliced = 0 - range in latitude
%ltsliced = 1 - plot at constant latitude.

%lon indicies -------------------------------------------------------
if (round(slice{1}(1)) == slice{1}(1)) %integer longitude indicy
    longitude_ii = slice{1}(1);
    longitude_di = netcdf.getVar(ncid,netcdf.inqVarID(ncid, xname), ...
           [longitude_ii-1 round((latitude_ii+latitude_if)/2)-1],[1 1],'double');
else
    lon = netcdf.getVar(ncid,netcdf.inqVarID(ncid, xname), ...
         [0 round((latitude_ii+latitude_if)/2)-1],[xLhis 1],'double');
    [tmp longitude_ii] = min(abs(lon-slice{1}(1)));
    longitude_di = lon(longitude_ii);
end

if (length(slice{1})>1)
    lnsliced = 0; % range in longitude.
    if (round(slice{1}(2)) == slice{1}(2)) %integer longitude indicy
        longitude_if = slice{1}(2);
        longitude_df = netcdf.getVar(ncid,netcdf.inqVarID(ncid, ...
                                                         xname), ...
                    [longitude_if-1 round((latitude_ii+latitude_if)/2)-1],[1 1],'double');
    else
        lon = netcdf.getVar(ncid,netcdf.inqVarID(ncid, xname), ...
              [0 round((latitude_ii+latitude_if)/2)-1],[xLhis 1],'double');
        [tmp longitude_if] = min(abs(lon-slice{1}(2)));
        longitude_df = lon(longitude_if);
    end
else
    lnsliced = 1;
    longitude_if = longitude_ii;
    longitude_df = longitude_di;
end
%lnsliced = 0 - range in longitude
%lnsliced = 1 - plot at constant longitude.

netcdf.close(ncid);
if (exist(ename) == 2)
netcdf.close(ncidE);
end

% ------------------------Get Variable name string----------------
if (length(strfind(VarOp{end}, '(1)')) == 0)
    numvars = length(VarOp);
    VarOp{numvars+1} = '(1)';
    for i=2:numvars
        VarOp{numvars+1} = [VarOp{numvars+1} ' + (' num2str(i) ...
                            ')'];
    end
end   
IDs = zeros(length(VarOp)-1,1);
VarNAME = VarOp{end};
for i=1:(length(VarOp)-1)
    if (length(strfind(VarOp{i},'_')) == 0)
        ThisVarNAME = VarOp{i};
    else
        ThisVarNAME = strrep(VarOp{i},'_','_{');
        ThisVarNAME = [ThisVarNAME '}'];
    end
    VarNAME = strrep(VarNAME,['(' num2str(i) ')'],[' ' ThisVarNAME ...
                        ' ']);
end
VarNAME = strrep(VarNAME,'.^','^');
VarNAME = ['$' VarNAME '$'];
% ------------------------Do Plotting-----------------------------
% ------------------------%%%%%%%%%%%-----------------------------
% ----------------------------------------------------------------
% $$$ tsliced
% $$$ dsliced
% $$$ ltsliced
% $$$ lnsliced
if (tsliced == 0) %-------------------------- %%%%time range
                  %-----------------------------------------------
    if (dsliced == 1 & lnsliced == 1 & ltsliced == 1) %Simple time
                                                      %series 4D variable
        status = 'pcolPlotNC is making a simple time series plot...'
        slice = {[longitude_ii longitude_if],...
                 [latitude_ii   latitude_if],...
                 [depth_ii           depth_if],...
                 [time_ii           time_if]};
        Var = squeeze(GetVar(hname,dname,VarOp,slice));
        Var(abs(Var)>1e10) = NaN;
    if (plotting > 0)
        size(time)
        size(Var)
        plot(time,Var,'-k');
        xlim([time(1) time(end)]);
        xlabel('Time (days)');
        ylabel('Variable');
        title(['Time series of ' VarNAME ' at lon = ' num2str(longitude_di) ...
               ' lat = ' num2str(latitude_di) 'depth = ' ...
               num2str(depth_di)]);
    end
        iVar = time;
        jVar = 0;
    elseif (dsliced == 3 & lnsliced == 1 & ltsliced == 1) %Simple time
                                                      %series 3D
                                                      %variable
        status = 'pcolPlotNC is making a simple time series plot...'
        slice = {[longitude_ii longitude_if],...
                 [latitude_ii   latitude_if],...
                 [time_ii           time_if]};
        Var = squeeze(GetVar(hname,dname,VarOp,slice));
        Var(abs(Var)>1e10) = NaN;
    if (plotting > 0)
        plot(time,Var,'-k');
        xlim([time(1) time(end)]);
        xlabel('Time (days)');
        ylabel('Variable');
        title(['Time series of ' VarNAME ' at lon = ' num2str(longitude_di) ' lat = ' num2str(latitude_di)]);
    end        
    iVar = time;
        jVar = 0;
    
    else%%%%%%%%%Hovmöller plot    
status = 'pcolPlotNC is making a Hoffmoller plot...'    
if (lnsliced == 0)
    if (dsliced == 1)
    slice = {[longitude_ii longitude_if],...
             [latitude_ii   latitude_if],...
             [depth_ii           depth_if],...
             [time_ii           time_if]};
    elseif (dsliced == 2) %Isopycnal-Hovmoller
        slice = {[longitude_ii longitude_if],...
                 [latitude_ii   latitude_if],...
                 rhoISP,...
                 [time_ii           time_if]};
    end
    Var = squeeze(GetVar(hname,dname,VarOp,slice));
    Var(abs(Var)>1e10) = NaN;
    iVar = squeeze(GetVar(hname,dname,{xname},slice));
    jVar = time;
    [iVar,jVar] = ndgrid(iVar(:,1),jVar);
    if (plotting > 0)
        pcolPlot(iVar,jVar,Var);
        xlabel(xlab);
        ylabel('Time (year day)');
        if (dsliced == 1)
            title(['Hovmöller of ' VarNAME ' at lat = ' num2str(latitude_di) ...
               '$^\circ$N depth = ' num2str(depth_di) 'm']);
        elseif (dsliced == 2)
            title(['Hovmöller of ' VarNAME ' at lat = ' num2str(latitude_di) ...
               '$^\circ$N $\rho$ = ' num2str(rhoISP)]);
        end
    end
elseif (ltsliced == 0)
    if (dsliced == 1)
    slice = {[longitude_ii longitude_if],...
             [latitude_ii   latitude_if],...
             [depth_ii           depth_if],...
             [time_ii           time_if]};
    elseif (dsliced == 2) %Isopycnal-Hovmoller
        slice = {[longitude_ii longitude_if],...
                 [latitude_ii   latitude_if],...
                 rhoISP,...
                 [time_ii           time_if]};
    end
    Var = squeeze(GetVar(hname,dname,VarOp,slice));
    Var(abs(Var)>1e10) = NaN;
    iVar = squeeze(GetVar(hname,dname,{yname},slice));
    jVar = time;
    [iVar,jVar] = ndgrid(iVar(1,:)',jVar);
    if (plotting > 0)
        pcolPlot(iVar,jVar,Var);
        xlabel(ylab);
        ylabel('Time (year day)');
        if (dsliced == 1)
            title(['Hovmöller of ' VarNAME ' at lon = ' num2str(longitude_di) ...
               '$^\circ$E depth = ' num2str(depth_di) 'm']);
        elseif (dsliced == 2)
            title(['Hovmöller of ' VarNAME ' at lon = ' num2str(longitude_di) ...
               '$^\circ$E $\rho$ = ' num2str(rhoISP)]);
        end
    end
elseif (dsliced == 0)
    slice = {[longitude_ii longitude_if],...
             [latitude_ii   latitude_if],...
             [depth_ii           depth_if],...
             [time_ii           time_if]};
    Var = squeeze(GetVar(hname,dname,VarOp,slice));
    Var(abs(Var)>1e10) = NaN;
    iVar = squeeze(GetVar(hname,dname,{'z_rho'},slice));
    jVar = repmat(time',[length(iVar(:,1)) 1]);
    if (plotting > 0)
        pcolPlot(jVar,iVar,Var);
        ylabel('Depth (m)');
        xlabel('Time (year day)');
        title(['Hovmoller of ' VarNAME ' at lon = ' num2str(longitude_di) ...
               '$^\circ$E lat = ' num2str(latitude_di) '$^\circ$N']);
    end

end

    end
elseif (dsliced == 3) %---------------------- %%%%Depth-independent
                      %--------------------------------------------
status = 'pcolPlotNC is making a depth independent lon-lat plot...'
slice = {[longitude_ii longitude_if],...
         [latitude_ii   latitude_if],...
         [time_ii           time_if]};
    iVar = GetVar(hname,dname,{xname},slice);
    jVar = GetVar(hname,dname,{yname},slice);
    Var = GetVar(hname,dname,VarOp,slice);
    Var(abs(Var)>1e10) = NaN;
        
    if (plotting > 0)
        pcolPlot(iVar,jVar,Var);
        xlabel(xlab);
        ylabel(ylab);
        title([VarNAME ' at t = ' num2str(time_di) ' days']);
    end           
   
elseif (dsliced == 2) %---------------------- %%%%isopycnal
                      %-----------------------------------------
status = 'pcolPlotNC is making an isopycnal plot...'

slice = {[longitude_ii longitude_if],...
         [latitude_ii   latitude_if],...
         rhoISP,...
         [time_ii           time_if]};
sliceXY = {[longitude_ii longitude_if],...
         [latitude_ii   latitude_if],...
         [time_ii           time_if]};
    iVar = GetVar(hname,dname,{xname},sliceXY);
    jVar = GetVar(hname,dname,{yname},sliceXY);
    Var = GetVar(hname,dname,VarOp,slice);
    Var(abs(Var)>1e10) = NaN;
    if (plotting > 0)
        pcolPlot(iVar,jVar,Var);
        xlabel(xlab);
        ylabel(ylab);
        title([VarNAME ' at t = ' num2str(time_di) ' days on $\rho$ ' ...
                            '= ' num2str(rhoISP) ' isopycnal']);
    end           


elseif (dsliced == 0) %---------------------- %%%%Depth-? plot
                      %-----------------------------------------
        slice = {[longitude_ii longitude_if],...
                 [latitude_ii   latitude_if],...
                 [depth_ii         depth_if],...
                 [time_ii           time_if]}
    if (ltsliced == 0) % ------- Depth-latitude plot
        status = 'pcolPlotNC is making a depth-latitude plot...'
        iVar = squeeze(GetVar(hname,dname,{yname},slice));
        jVar = squeeze(GetVar(hname,dname,{'z_rho'},slice));
        Var = squeeze(GetVar(hname,dname,VarOp,slice));
        Var(abs(Var)>1e10) = NaN;
        if (plotting > 0)
            pcolPlot(iVar,jVar,Var);
            xlabel(ylab);
            ylabel('Depth (m)');
            title([VarNAME ' at ' num2str(longitude_di) '$^\circ$E ' ...
                    ' and t = ' num2str(time_di) ' days']);
            if (plotting == 1)
                rho = squeeze(GetVar(hname,dname,{'rho'},slice));
                hold on;
                contour(iVar,jVar,rho,isp,'-k');
                hold off;
            end
            ylim(Dlim);
        end            
    else               % ------- Depth-longitude plot
        status = 'pcolPlotNC is making a depth-longitude plot...'
        iVar = squeeze(GetVar(hname,dname,{xname},slice));
        jVar = squeeze(GetVar(hname,dname,{'z_rho'},slice));
        Var = squeeze(GetVar(hname,dname,VarOp,slice));
        Var(abs(Var)>1e10) = NaN;
        if (plotting > 0)
            pcolPlot(iVar,jVar,Var);
            xlabel(xlab);
            ylabel('Depth (m)');
            title([VarNAME ' at ' num2str(latitude_di) '$^\circ$N ' ...
                    ' and t = ' num2str(time_di) ' days']);
            if (plotting == 1)
                rho = squeeze(GetVar(hname,dname,{'rho'},slice));
                hold on;
                contour(iVar,jVar,rho,isp,'-k');
                hold off;
            end
            ylim(Dlim);
        end            
    end
elseif (dsliced == 1) %---------------------- %%%%lon-lat plot
                      %-----------------------------------------
    status = 'pcolPlotNC is making a longitude-latitude plot...'
    slice = {[longitude_ii longitude_if],...
             [latitude_ii   latitude_if],...
             [depth_ii         depth_if],...
             [time_ii           time_if]};
    iVar = GetVar(hname,dname,{xname},slice);
    jVar = GetVar(hname,dname,{yname},slice);
    Var = GetVar(hname,dname,VarOp,slice);
    Var(abs(Var)>1e10) = NaN;
        
    if (plotting > 0)
        pcolPlot(iVar,jVar,Var);
        xlabel(xlab);
        ylabel(ylab);
        title([VarNAME ' at ' num2str(depth_di) 'm and t = ' ...
               num2str(time_di) ' days']);
    end           
end
    
function [hgrdnum,vgrdnum,NDimensions] = grd_var(ncid,varname)
%---------------------------------------------------------------------
%---------------------------------------------------------------------
%
% This function determines the grid numbers for the variable
% varname in the file fname.
%
% INPUTS:
%
% varname = name of variable string.
%
% fname = filenames
%
% OUTPUTS:
%
% hgrdnum = horizontal grid number 1(rho), 2(u), 3(v), 4(psi)
%
% vgrdnum = vertical grid number 1(rho) 2(w)
%
% NDimensions = number of dimensions
%---------------------------------------------------------------------
%
% Dependencies; none. 
%
% Ryans ROMS Matlab and netcdf Utilities 23/7/13
%
%---------------------------------------------------------------------
%---------------------------------------------------------------------
    vid = netcdf.inqVarID(ncid,varname);
    [tmp,tmp2,Dids,tmp3] = netcdf.inqVar(ncid,vid);
    NDimensions = length(Dids); % number of dimensions.
        
%Determine horizontal grid type:
    [dnh,tmp] = netcdf.inqDim(ncid,Dids(1));
    if (dnh(end) == 'o')
        hgrd = 1;
    elseif (dnh(end) == 'u')
        hgrd = 2;
    elseif (dnh(end) == 'v')
        hgrd = 3;
    elseif (dnh(end) == 'i')
        hgrd = 4;
    end
    %Determine vertical grid type:
    vgrd = 1;
    if (NDimensions == 4)
        [dnv,tmp] = netcdf.inqDim(ncid,Dids(3));
        if (dnv(end) == 'w')
            vgrd = 2;
        end
    end
end


end

